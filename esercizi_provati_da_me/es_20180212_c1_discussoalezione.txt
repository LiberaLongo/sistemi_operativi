// http://www.cs.unibo.it/~renzo/so/compiti/2018.02.12.tot.pdf
/*12 febbraio 2018
Esercizio c.1: L'incrocio fra una strada e un canale è regolato da un ponte mobile come quello illustrato
dall'apposito segnale.
Ovviamente le auto possono attraversare il ponte solo se è abbassato e si può alzare il ponte se non ci sono
auto che lo stanno attraversando. Il ponte deve essere alzato per far passare le imbarcazioni.
Il canale in corrispondenza del ponte ha una larghezza che consente il passaggio contemporaneo di due
imbarcazioni, una per ogni senso di percorrenza, il ponte ha la portata massima di MAXCAR autoveicoli.
Le auto per attraversare il ponte usano il seguente protocollo:
 bridge.car_enter(direction)
 ... attraversa il ponte
 bridge.car_exit(direction)
Le imbarcazioni usano il protocollo:
 bridge.boat_enter(direction)
 ... passa sotto al ponte
 bridge.boat_exit(direction)
dove direction vale 0 o 1 per riconoscere le due diverse direzioni delle auto o delle imbarcazioni.
Occorre scrivere la soluzione in modo da evitare casi di starvation.
*/

/*
SUPPONGO CHE: se due barche devono attraversare partendo dalla stessa direzione
allora passano comunque una alla volta.
Ovviamente si può abbassare il ponte se non ci sono barche che attraversano sotto.

assumo che le macchine si possano superare tra loro una volta sul ponte...
...quindi MAXCAR sia riferito alla somma di quelle attraversanti in entrambe le direzioni
*/


#define CAR_CAN_GO() ( abbassato == True && car_attraversanti < MAXCAR )
#define BOAT_CAN_GO(direction) ( abbassato == False && boat_attraversanti[direction] == 0 )
//NOTA: visto che le barche hanno condizioni diverse in base alla direzione devo mettere la macro dipendente dalla direzione

#define NO_CAR_UP() ( car_attraversanti == 0 )
#define NO_BOAT_DOWN() ( boat_attraversanti[0] == 0 && boat_attraversanti[1] == 0 )

const int MAXCAR = ...? ; //il ponte ha la portata massima di MAXCAR autoveicoli.
const int DIRECTION = 2 ;

monitor bridge {
	bool abbassato;
	int car_attraversanti;	//non mi interessa la direzione per le auto
	int boat_attraversanti[DIRECTION];
	condition okToCar;		//CAR_CAN_GO() == True
	condition okToBoat[DIRECTION];		//BOAT_CAN_GO() == True

	//per evitare starvation devo contare le auto e le barche in attesa
	int waiting_car;					//auto in attesa in entrambe le direzioni
	int waiting_boat;					//barche in attesa in entrambe le direzioni

	bridge(bool start_car){				//se start_car == True allora inizializzo abbassato = True; False altrimenti
		waiting_car = 0;
		waiting_boat = 0;
		abbassato = start_car;
		car_attraversanti = 0;
		boat_attraversanti[0] = 0;
		boat_attraversanti[1] = 0;
	}

	procedure entry car_enter(int direction) {
		//nota: non ci interessa la direzione delle auto quindi direction non verrà usato

		if( abbassato == False && NO_BOAT_DOWN() )	//se il ponte è alzato e non ci sono barche sotto
			abbassato = True;						//posso abbassarlo

		if( ! CAR_CAN_GO() || waiting_boat > 0) {	//attendo anche se c'è una barca in attesa		
			waiting_car ++;
			okToCar.wait();
			waiting_car --;
		}

		car_attraversanti ++;

		/*NOTA BENE: se posso sblocco l'auto dietro di me,
		in questo modo 'dopo che è passata una barca'
		posso sfruttare MAXCAR auto sul ponte e non solo 1
		(o 2 nel caso si tenesse conto della direzione della macchina)
		al risveglio da boat_exit ...o da car_exit*/

		if( CAR_CAN_GO() && waiting_boat == 0 ) //se posso risveglio altre in cascata
			okToCar.signal();	//sblocco un altra auto indipendentemente dalla sua direzione
	}
	procedure entry car_exit(int direction) {
		//nota: non ci interessa la direzione delle auto quindi direction non verrà usato

		car_attraversanti --;

		if( waiting_boat > 0 && NO_CAR_UP() ) {
			abbassato = False;			//alzo il ponte, per far passare le barche

			//sblocco le barche in entrambe le direzioni
			//sono sicurə che abbassato sia False perchè l'ho appena assegnato false
			//sono sicurə che non ci siano barche attraversanti perchè sta uscendo una macchina
			okToBoat[0].signal();
			okToBoat[1].signal();

			if( NO_BOAT_DOWN() )
				abbassato = True;		//abbasso il ponte, per far passare le auto
		}

		if( CAR_CAN_GO() && waiting_boat == 0 )
			okToCar.signal();	//sblocco una sola auto indipendentemente dalla direzione
	}

	procedure entry boat_enter(int direction) {

		if( abbassato == True && NO_CAR_UP() )		//se il ponte è abbassato e non ci sono auto sopra
			abbassato = False;						//posso alzarlo

		if( ! BOAT_CAN_GO(direction) || waiting_car > 0 ) {	//aspettiamo anche se ci sono auto in attesa
			waiting_boat ++;
			okToBoat[direction].wait();
			waiting_boat --;
		}

		boat_attraversanti[direction] ++;
	}
	procedure entry boat_exit(int direction) {

		boat_attraversanti[direction] --;

		if( waiting_car > 0 && NO_BOAT_DOWN() ) {
			abbassato = True;			//abbasso il ponte, per far passare le auto

			if( CAR_CAN_GO() ) {		//se posso sblocco un auto in una delle due direzioni
				okToCar.signal();		//che sbloccherà nella car_enter altre in catena
			}

			if( NO_CAR_UP() )
				abbassato = False;		//alzo il ponte, per far passare le barche
		}

		if( BOAT_CAN_GO(direction) && waiting_car == 0)
			okToBoat[direction].signal();	//sblocco solo la barca dietro di me
	}
}




