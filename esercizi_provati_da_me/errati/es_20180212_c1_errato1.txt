/*
ERRATO per ALMENO questi motivi. il successivo è errato2!
il motivo per cui è sbagliato ed è stato modificato da errato1 a errato2 è che
si abbassa e si alza il ponte senza controllare se si può fare o no.
Poi CI SONO ALTRI MOTIVI segnalati in errato2!
*/

// http://www.cs.unibo.it/~renzo/so/compiti/2018.02.12.tot.pdf
/*12 febbraio 2018
Esercizio c.1: L'incrocio fra una strada e un canale è regolato da un ponte mobile come quello illustrato
dall'apposito segnale.
Ovviamente le auto possono attraversare il ponte solo se è abbassato e si può alzare il ponte se non ci sono
auto che lo stanno attraversando. Il ponte deve essere alzato per far passare le imbarcazioni.
Il canale in corrispondenza del ponte ha una larghezza che consente il passaggio contemporaneo di due
imbarcazioni, una per ogni senso di percorrenza, il ponte ha la portata massima di MAXCAR autoveicoli.
Le auto per attraversare il ponte usano il seguente protocollo:
 bridge.car_enter(direction)
 ... attraversa il ponte
 bridge.car_exit(direction)
Le imbarcazioni usano il protocollo:
 bridge.boat_enter(direction)
 ... passa sotto al ponte
 bridge.boat_exit(direction)
dove direction vale 0 o 1 per riconoscere le due diverse direzioni delle auto o delle imbarcazioni.
Occorre scrivere la soluzione in modo da evitare casi di starvation.
*/

/*
SUPPONGO CHE: se due barche devono attraversare partendo dalla stessa direzione
allora passano comunque una alla volta.
Ovviamente si può abbassare il ponte se non ci sono barche che attraversano sotto.

assumo che le macchine si possano superare tra loro una volta sul ponte...
...quindi MAXCAR sia riferito alla somma di quelle attraversanti in entrambe le direzioni
*/


#define CAR_CAN_GO() ( abbassato == True && (car_attraversanti[0] + car_attraversanti[1]) < MAXCAR )
#define BOAT_CAN_GO() ( abbassato == False && boat_attraversanti[direction] == 0 )

const int MAXCAR = ...? ; //il ponte ha la portata massima di MAXCAR autoveicoli.
const int DIRECTION = 2 ;

monitor bridge {
	bool abbassato;
	int car_attraversanti[DIRECTION];
	int boat_attraversanti[DIRECTION];
	condition okToCar[DIRECTION];		//CAR_CAN_GO() == True
	condition okToBoat[DIRECTION];		//BOAT_CAN_GO() == True

	//per evitare starvation devo contare le auto e le barche in attesa
	int waiting_car;					//auto in attesa in entrambe le direzioni
	int waiting_boat;					//barche in attesa in entrambe le direzioni

	bridge(bool start_car){				//se start_car == True allora inizializzo abbassato = True; False altrimenti
		waiting_car = 0;
		waiting_boat = 0;
		abbassato = start_car;
		for(int i = 0; i < DIRECTION; i++) {
			car_attraversanti[i] = 0;
			boat_attraversanti[i] = 0;
		}
	}
	procedure entry car_enter(int direction) {
		if( ! CAR_CAN_GO() || waiting_boat > 0) {	//attendo anche se c'è una barca in attesa		
			waiting_car ++;
			okToCar[direction].wait();
			waiting_car --;
		}
		car_attraversanti[direction] ++;
	}
	procedure entry car_exit(int direction) {
		car_attraversanti[direction] --;
		if( waiting_boat > 0 ) {
			abbassato = False;			//alzo il ponte, per far passare le barche
			if( BOAT_CAN_GO() )
				okToBoat[direction].signal();
			abbassato = True;			//abbasso il ponte, per far passare le auto
		}
		if( CAR_CAN_GO() )
			okToCar.signal();
	}
	procedure entry boat_enter(int direction) {
		if( ! BOAT_CAN_GO() || waiting_car > 0 ) { //aspettiamo anche se ci sono auto in attesa
			waiting_boat ++;
			okToBoat[direction].wait();
			waiting_boat --;
		}
		boat_attraversanti[direction] ++;
	}
	procedure entry boat_exit(int direction) {
		boat_attraversanti[direction] --;
		if( waiting_car > 0 ) {
			abbassato = True;			//abbasso il ponte, per far passare le auto
			if( CAR_CAN_GO() )
				okToCar[direction].signal();
			abbassato = False;			//alzo il ponte, per far passare le barche
		}
		if( BOAT_CAN_GO() )
			okToBoat.signal();
	}
}




